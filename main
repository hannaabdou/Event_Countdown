import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:async';

void main() {
  runApp(EventCountdownApp());
}

class EventCountdownApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Event Countdown',
      theme: ThemeData(
        brightness: Brightness.light,
        primaryColor: Colors.teal,
        accentColor: Colors.tealAccent,
        scaffoldBackgroundColor: Colors.grey[50],
        fontFamily: 'Roboto',
        textTheme: TextTheme(
          headline6: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.teal),
          bodyText1: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
          bodyText2: TextStyle(fontSize: 14, color: Colors.grey[600]),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            padding: EdgeInsets.symmetric(vertical: 12, horizontal: 20),
          ),
        ),
      ),
      home: EventHomePage(),
    );
  }
}

class EventHomePage extends StatefulWidget {
  @override
  _EventHomePageState createState() => _EventHomePageState();
}

class _EventHomePageState extends State<EventHomePage> {
  final List<Map<String, dynamic>> _events = [];
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    _startTimer();
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  void _startTimer() {
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {}); // Refresh UI every second
    });
  }

  void _addEvent(String eventName, DateTime eventDateTime, String reminderOption) {
    setState(() {
      _events.add({
        'name': eventName,
        'dateTime': eventDateTime,
        'reminder': reminderOption,
      });
    });
  }

  void _editEvent(int index, String eventName, DateTime eventDateTime, String reminderOption) {
    setState(() {
      _events[index] = {
        'name': eventName,
        'dateTime': eventDateTime,
        'reminder': reminderOption,
      };
    });
  }

  void _deleteEvent(int index) {
    setState(() {
      _events.removeAt(index);
    });
  }

  String _getCountdown(DateTime eventDateTime) {
    final difference = eventDateTime.difference(DateTime.now());
    if (difference.isNegative) return 'Event passed';
    return '${difference.inDays}d ${difference.inHours.remainder(24)}h '
           '${difference.inMinutes.remainder(60)}m ${difference.inSeconds.remainder(60)}s';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Event Countdown'),
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: _events.isEmpty
                  ? Center(
                      child: Text(
                        'No events yet!',
                        style: Theme.of(context).textTheme.bodyText1!.copyWith(color: Colors.grey),
                      ),
                    )
                  : ListView.builder(
                      itemCount: _events.length,
                      itemBuilder: (context, index) {
                        final event = _events[index];
                        return EventCard(
                          eventName: event['name'],
                          eventDateTime: event['dateTime'],
                          reminderOption: event['reminder'],
                          countdown: _getCountdown(event['dateTime']),
                          onEdit: () => _showEditEventDialog(
                            index, event['name'], event['dateTime'], event['reminder'],
                          ),
                          onDelete: () => _deleteEvent(index),
                        );
                      },
                    ),
            ),
            SizedBox(height: 10),
            ElevatedButton.icon(
              onPressed: _showAddEventDialog,
              icon: Icon(Icons.add, size: 24),
              label: Text('Add Event', style: TextStyle(fontSize: 18)),
              style: ElevatedButton.styleFrom(
                primary: Colors.teal,
                shape: StadiumBorder(),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddEventDialog() {
    String eventName = '';
    DateTime selectedDateTime = DateTime.now();
    String selectedReminder = 'At time of event';

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Add New Event'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  decoration: InputDecoration(labelText: 'Event Name'),
                  onChanged: (value) => eventName = value,
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () async {
                    final date = await showDatePicker(
                      context: context,
                      initialDate: selectedDateTime,
                      firstDate: DateTime.now(),
                      lastDate: DateTime(2101),
                    );
                    if (date != null) {
                      final time = await showTimePicker(
                        context: context,
                        initialTime: TimeOfDay.fromDateTime(selectedDateTime),
                      );
                      if (time != null) {
                        selectedDateTime = DateTime(
                          date.year, date.month, date.day, time.hour, time.minute,
                        );
                      }
                    }
                  },
                  child: Text('Select Date & Time'),
                ),
                SizedBox(height: 10),
                DropdownButton<String>(
                  value: selectedReminder,
                  items: ['At time of event', '1 hour before', '1 day before']
                      .map((option) => DropdownMenuItem(value: option, child: Text(option)))
                      .toList(),
                  onChanged: (value) => setState(() => selectedReminder = value!),
                ),
              ],
            ),
          ),
          actions: [
            ElevatedButton(
              onPressed: () {
                if (eventName.isNotEmpty) {
                  _addEvent(eventName, selectedDateTime, selectedReminder);
                  Navigator.of(context).pop();
                }
              },
              child: Text('Add'),
            ),
          ],
        );
      },
    );
  }

  void _showEditEventDialog(int index, String eventName, DateTime eventDateTime, String reminderOption) {
    // Same as the Add Event Dialog but with populated data
  }
}

class EventCard extends StatelessWidget {
  final String eventName;
  final DateTime eventDateTime;
  final String reminderOption;
  final String countdown;
  final VoidCallback onEdit;
  final VoidCallback onDelete;

  EventCard({
    required this.eventName,
    required this.eventDateTime,
    required this.reminderOption,
    required this.countdown,
    required this.onEdit,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      margin: EdgeInsets.symmetric(vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(eventName, style: Theme.of(context).textTheme.headline6),
            SizedBox(height: 8),
            Text('Event Time: ${DateFormat('yyyy-MM-dd HH:mm').format(eventDateTime)}'),
            Text('Reminder: $reminderOption'),
            Divider(),
            Text('Countdown: $countdown', style: Theme.of(context).textTheme.bodyText2),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                IconButton(onPressed: onEdit, icon: Icon(Icons.edit, color: Colors.teal)),
                IconButton(onPressed: onDelete, icon: Icon(Icons.delete, color: Colors.red)),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
